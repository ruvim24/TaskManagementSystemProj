version: '3.8'

services:
  app:
    build: .
    container_name: app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    environment:
      POSTGRES_USER: django-user
      POSTGRES_PASSWORD: passw0rd
      POSTGRES_DB: django-db
      POSTGRES_HOST: db
      REDIS_HOST: redis
      MINIO_STORAGE_ENDPOINT: minio:9000
      MINIO_ROOT_USER: minio_user
      MINIO_ROOT_PASSWORD: minio_password
      MINIO_STORAGE_USE_HTTPS: "false"
    networks:
      - my-net

  db:
    image: postgres:14
    environment:
      POSTGRES_USER: django-user
      POSTGRES_PASSWORD: passw0rd
      POSTGRES_DB: django-db
    networks:
      - my-net

  redis:
    image: redis:latest
    networks:
      - my-net

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsSL http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - my-net

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minio_user
      MINIO_ROOT_PASSWORD: minio_password
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my-net

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq-broker
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=rabbit_user
      - RABBITMQ_DEFAULT_PASS=rabbit_password
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - my-net

  celery-worker:
    build: .
    container_name: celery-worker
    command: poetry run celery -A DjangoProject.celery worker -l info
    environment:
      - C_FORCE_ROOT=true
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - my-net

  celery-beat:
    build: .
    container_name: celery-beat
    command: poetry run celery -A DjangoProject.celery beat -l info
    environment:
      - C_FORCE_ROOT=true
    depends_on:
      - rabbitmq
      - redis
    networks:
      - my-net
networks:
  my-net:
    driver: bridge
