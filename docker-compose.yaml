version: '3.8'

services:
  app:
    build: .
    container_name: app
    ports:
      - "8000:8000"
    networks:
      - my-net
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_healthy

  db:
    image: postgres:14
    container_name: django-postgres
    environment:
      - POSTGRES_USER=django-user
      - POSTGRES_PASSWORD=passw0rd
      - POSTGRES_DB=django-db
    ports:
      - "5433:5432"
    networks:
      - my-net

  pghero:
    image: ankane/pghero
    container_name: pghero
    environment:
      - DATABASE_URL=postgres://django-user:passw0rd@db:5432/django-db
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_started
    networks:
      - my-net

  redis:
    image: redis:latest
    container_name: redis-primary
    ports:
      - "6379:6379"
    networks:
      - my-net

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minio_user
      MINIO_ROOT_PASSWORD: minio_password
      MINIO_NOTIFY_WEBHOOK_ENABLE_1: "on"
      MINIO_NOTIFY_WEBHOOK_ENDPOINT_1: "http://host.docker.internal:8000/api/tasks/upload-webhook/"
    command: minio server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - my-net

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq-broker
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=rabbit_user
      - RABBITMQ_DEFAULT_PASS=rabbit_password
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - my-net

  celery-worker:
    build: .
    container_name: celery-worker
    command: uv run celery -A DjangoProject.celery worker -l info
    environment:
      - C_FORCE_ROOT=true
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - my-net

  celery-beat:
    build: .
    container_name: celery-beat
    command: uv run celery -A DjangoProject.celery beat -l info
    environment:
      - C_FORCE_ROOT=true
    depends_on:
      - rabbitmq
      - redis
    networks:
      - my-net


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.1.2
    container_name: django-elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - ELASTIC_PASSWORD=your_secure_password
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - my-net
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail http://localhost:9200/_cluster/health?wait_for_status=green || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 60s

  kibana:
    image: docker.elastic.co/kibana/kibana:9.1.2
    container_name: kibana-elasticsearch
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - my-net
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:5601/api/status || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - my-net

networks:
  my-net:
    external: false

volumes:
  minio_data:
  es_data:
    driver: local

